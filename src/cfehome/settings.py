"""
Django settings for cfehome project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path

from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
FIXTURES_DIR = BASE_DIR / "fixtures"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("DJANGO_SECRET_KEY", default=None)
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DJANGO_DEBUG", cast=bool, default=False)
DEBUG_HOSTNAME = config("DEBUG_HOSTNAME", default=None)
PARENT_HOST = config("PARENT_HOST", default=None)
BASE_URL = config("BASE_URL", default=None)

ALLOWED_HOSTS = []
ALLOWED_HOST = config("ALLOWED_HOST", default=None)
_ALLOWED_HOSTS = [x.strip() for x in config("ALLOWED_HOSTS", default="").split(",")]
ALLOWED_HOSTS += _ALLOWED_HOSTS
if ALLOWED_HOST is not None:
    ALLOWED_HOSTS.append(ALLOWED_HOST)
if PARENT_HOST is not None:
    ALLOWED_HOSTS.append(PARENT_HOST)
if DEBUG and DEBUG_HOSTNAME:
    ALLOWED_HOSTS.append(DEBUG_HOSTNAME)

# Email definition

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = config(
    "EMAIL_HOST", default="localhost"
)  # 'email-smtp.ap-northeast-1.amazonaws.com'
EMAIL_HOST_USER = config("EMAIL_HOST_USER", default="")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD", default="")
DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL", default="webmaster@localhost")
SERVER_EMAIL = config("SERVER_EMAIL", default="root@localhost")
MANAGER_EMAIL = config("MANAGER_EMAIL", default=None)
EMAIL_PORT = 587
EMAIL_USE_TLS = True

if MANAGER_EMAIL:
    ADMINS = (("Admin", MANAGER_EMAIL),)
    MANAGERS = ADMINS

# Application definition

from .installed import *  # noqa

MIDDLEWARE = [
    "django_hosts.middleware.HostsRequestMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_htmx.middleware.HtmxMiddleware",
    "django_hosts.middleware.HostsResponseMiddleware",
]

APPEND_SLASH = True
ROOT_URLCONF = "cfehome.urls"
ROOT_HOSTCONF = "cfehome.hosts"
DEFAULT_HOST = "www"
DEFAULT_ADMIN_HOST = config("DEFAULT_ADMIN_HOST", default="admin")
GH_BLOG_TOKEN=config("BLOG_TOKEN", default=None)

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "cfehome.context_processors.cfehome_urls",
                "projects.context_processors.projects_context",
            ],
        },
    },
]

WSGI_APPLICATION = "cfehome.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

from .db import *  # noqa

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators


AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
]

SITE_ID = 1

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"
MEDIA_URL = "media/"

STATICFILES_DIRS = [BASE_DIR / "static"]

CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"

COMPRESS_ROOT = BASE_DIR / "static"
COMPRESS_OUTPUT_DIR = "min"
COMPRESS_ENABLED = True


# https://django-compressor.readthedocs.io/en/stable/remote-storages.html#django-storages
# COMPRESS_URL = "http://compressor-test.s3.amazonaws.com/"
# COMPRESS_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "compressor.finders.CompressorFinder",
)
STATIC_ROOT = BASE_DIR.parent / "cdn-local" / "static"
MEDIA_ROOT = BASE_DIR.parent / "cdn-local" / "media"
# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


LINODE_BUCKET = config("LINODE_BUCKET", default=None)
LINODE_BUCKET_REGION = config("LINODE_BUCKET_REGION", default=None)
LINODE_BUCKET_ACCESS_KEY = config("LINODE_BUCKET_ACCESS_KEY", default=None)
LINODE_BUCKET_SECRET_KEY = config("LINODE_BUCKET_SECRET_KEY", default=None)
USE_REMOTE_STATIC = config("USE_REMOTE_STATIC", cast=bool, default=True)
OBJECT_STORAGE_READY = all(
    [
        LINODE_BUCKET,
        LINODE_BUCKET_REGION,
        LINODE_BUCKET_ACCESS_KEY,
        LINODE_BUCKET_SECRET_KEY,
    ]
)
if OBJECT_STORAGE_READY:
    """
    Ability to use various django-storage classes
    without USE_REMOTE_STATIC being true.
    """
    S3_USE_SIGV4 = True
    AWS_S3_SIGNATURE_VERSION = "s3v4"
    AWS_S3_ENDPOINT_URL = f"https://{LINODE_BUCKET_REGION}.linodeobjects.com"
    AWS_ACCESS_KEY_ID = LINODE_BUCKET_ACCESS_KEY
    AWS_SECRET_ACCESS_KEY = LINODE_BUCKET_SECRET_KEY
    AWS_S3_REGION_NAME = LINODE_BUCKET_REGION
    AWS_S3_USE_SSL = True
    AWS_STORAGE_BUCKET_NAME = LINODE_BUCKET
    AWS_DEFAULT_ACL = "public-read"
    AWS_PRELOAD_METADATA = True
    AWS_QUERYSTRING_AUTH = False

    if USE_REMOTE_STATIC:
        """
        use object storage for all static files
        """
        COMPRESS_OFFLINE = False
        DEFAULT_FILE_STORAGE = "cfehome.storage.backends.MediaPrivateS3BotoStorage"
        STATICFILES_STORAGE = "cfehome.storage.backends.CachedS3Boto3Storage"
        STATIC_URL = f"https://{LINODE_BUCKET_REGION}.linodeobjects.com/"
        COMPRESS_URL = (
            f"https://{LINODE_BUCKET_REGION}.linodeobjects.com/{LINODE_BUCKET}/"
        )
        COMPRESS_STORAGE = (
            STATICFILES_STORAGE  # 'storages.backends.s3boto3.S3Boto3Storage'
        )
        COMPRESS_ROOT = STATIC_ROOT
        COMPRESS_OFFLINE_CONTEXT = {"STATIC_URL": "/static/"}


# CORS_REPLACE_HTTPS_REFERRER      = False
HOST_SCHEME = "http://"
SECURE_PROXY_SSL_HEADER = None
SECURE_SSL_REDIRECT = False
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False
SECURE_HSTS_SECONDS = None
SECURE_HSTS_INCLUDE_SUBDOMAINS = False
SECURE_FRAME_DENY = False
CSRF_USE_SESSIONS = True
SESSION_COOKIE_DOMAIN = config("SESSION_DOMAIN", default=PARENT_HOST)

if not DEBUG:
    # CORS_REPLACE_HTTPS_REFERER      = True
    HOST_SCHEME = "https://"
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_SECONDS = 1000000
    SECURE_FRAME_DENY = True


LOGIN_URL = "/account/login"
CONSOLE_URL = ""
if PARENT_HOST:
    LOGIN_URL = f"{HOST_SCHEME}www.{PARENT_HOST}/login"
    CONSOLE_URL = f"{HOST_SCHEME}console.{PARENT_HOST}"
    LOGIN_REDIRECT_URL = CONSOLE_URL
    LOGOUT_REDIRECT_URL = LOGIN_URL
